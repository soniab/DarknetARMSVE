The convolutional layer can be implemented with different algorithms like im2col+gemm, Winograd, fft, and direct. We are providing the optimized implementations for im2col+gemm and Winograd for the convolutional layer. 

 
To run with im2col+gemm implementations:
    Download: 
        git clone https://github.com/chalmers-hart/Darknet-ARM-SVE.git

    Compilation:
        im2col+gemm implementation is a part of the darknet repository and does not require any additional linking. 
        Enter the repository by using `cd Darknet-ARM-SVE`
        To compile the im2col+gemm implementation, use Makefile_gemm. 
        NNPACK is already set as 0 in the Makefile_gemm. 
        For compilation use the 'make -f Makefile_gemm' command. 
    Run:
        To exexute the binary on A64fx with YOLOV3 network model, use the following command
            './binary detect cfg/yolov3.cfg yolov3.weights data/dog.jpg'



To run with Winograd implementation:
    Download:
        git clone https://github.com/chalmers-hart/Darknet-ARM-SVE.git

    Compilation:
        Before compiling darknet repository, make sure to download NNPACK and build. Follow thw instructions from README_ARMSVE from "https://github.com/chalmers-hart/NNPACK.git" repository to download and compile the NNPACK for ARMSVE. Note: Please note that it is necessary to first build NNPACK for ARMSVE architecture because it is important to link 'NNPACK/build/libnnpack.a' to call the kernels from NNPACK repository for the Winograd implementation.  
    
        Compilation of Daknet with NNPACK:
            Enter the repository by using `cd Darknet-ARM-SVE`
            To compile the Winograd implementation, use Makefile_NNPACK. 
            NNPACK is already set as 1 in the Makefile_NNPACK. 
            For compilation use the 'make -f Makefile_NNPACK' command.  
    Run:
        To run the binary on A64fx use following command:
            './binary detect cfg/yolov3.cfg yolov3.weights data/dog.jpg'


Tests:
The generated binary has been tested on A64FX, ARMIE, and GEM5 simulators for the ARMSVE environment with 512, 1024, and 2048 bit vector lengths. 
